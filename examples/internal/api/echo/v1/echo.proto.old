syntax = "proto3";

package echo.v1;


option go_package = "github.com/asilverman/go-template-service/api/echo/v1;echov1alpha1";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: { 
        title: "Echo Service";
        version: "v1alpha1";
        contact: {
            name: "echo-service";
            url: "https://github.com/asilverman/echo-service";
            email: "none@example.com";
        };
    };
    external_docs: {
        url: "https://github.com/asilverman/go-template-service";
        description: "gRPC-gateway go-template-service echo service";
    };
    schemes: HTTP;
};

service EchoService {
    // Echoes a message
    rpc Echo (EchoRequest) returns (EchoResponse) {
        option (google.api.http) = {
            post: "/v1alpha1/echo"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            external_docs: {
                url: "https://github.com/asilverman/go-template-service";
               
            };
            description: "Returns 'echo: <value>' if a value is provided in the POST body, else 'echo, echo, echo...'"
        };
    }
}

// The request message containing the user's name.
message EchoRequest {
    repeated string users = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		pattern: "^[a-zA-Z0-9]{1, 32}$",
		title: "users",
		description: "A list of"
	}];
}

// The response message containing the greetings
message EchoResponse {
    string message = 1;
}
